// Date: 30.07.2015 20:43:43
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX


package net.stegr.playerinterfacemod.client.model;

import net.minecraft.client.entity.AbstractClientPlayer;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.ResourceLocation;

public class ModelPlayerInterface extends ModelBase {
    public boolean frontConnected;
    public boolean leftConnected;
    public boolean rightConnected;
    public boolean backConnected;
    public ResourceLocation skullTexture;
    //fields
    ModelRenderer Shape1;
    ModelRenderer Shape2;
    ModelRenderer Shape3;
    ModelRenderer Shape4;
    ModelRenderer Shape5;
    ModelRenderer Shape6;
    ModelRenderer Shape7;
    ModelRenderer Shape8;
    ModelRenderer Skull;
    ModelRenderer Shape10;
    ModelRenderer Shape11;
    ModelRenderer Shape12;
    ModelRenderer Shape13;
    ModelRenderer Shape14;
    ModelRenderer Shape15;
    ModelRenderer Shape16;
    ModelRenderer Shape17;
    ModelRenderer Shape18;
    ModelRenderer Shape19;
    ModelRenderer Shape20;
    ModelRenderer Shape21;

    public ModelPlayerInterface() {
        textureWidth = 64;
        textureHeight = 64;

        frontConnected = false;
        leftConnected = false;
        rightConnected = false;
        backConnected = false;

        skullTexture = AbstractClientPlayer.locationStevePng;

        Shape1 = new ModelRenderer(this, 0, 0);
        Shape1.addBox(0F, 0F, 0F, 16, 2, 16);
        Shape1.setRotationPoint(-8F, 22F, -8F);
        Shape1.setTextureSize(64, 64);
        Shape1.mirror = true;
        setRotation(Shape1, 0F, 0F, 0F);
        Shape2 = new ModelRenderer(this, 0, 0);
        Shape2.addBox(0F, 0F, 0F, 16, 2, 16);
        Shape2.setRotationPoint(-8F, 8F, -8F);
        Shape2.setTextureSize(64, 64);
        Shape2.mirror = true;
        setRotation(Shape2, 0F, 0F, 0F);
        Shape3 = new ModelRenderer(this, 0, 18);
        Shape3.addBox(0F, 0F, 0F, 14, 1, 14);
        Shape3.setRotationPoint(-7F, 21F, -7F);
        Shape3.setTextureSize(64, 64);
        Shape3.mirror = true;
        setRotation(Shape3, 0F, 0F, 0F);
        Shape4 = new ModelRenderer(this, 0, 18);
        Shape4.addBox(0F, 0F, 0F, 14, 1, 14);
        Shape4.setRotationPoint(-7F, 10F, -7F);
        Shape4.setTextureSize(64, 64);
        Shape4.mirror = true;
        setRotation(Shape4, 0F, 0F, 0F);
        Shape5 = new ModelRenderer(this, 0, 0);
        Shape5.addBox(0F, 0F, 0F, 1, 10, 1);
        Shape5.setRotationPoint(-6F, 11F, -6F);
        Shape5.setTextureSize(64, 64);
        Shape5.mirror = true;
        setRotation(Shape5, 0F, 0F, 0F);
        Shape6 = new ModelRenderer(this, 0, 0);
        Shape6.addBox(0F, 0F, 0F, 1, 10, 1);
        Shape6.setRotationPoint(-6F, 11F, 5F);
        Shape6.setTextureSize(64, 64);
        Shape6.mirror = true;
        setRotation(Shape6, 0F, 0F, 0F);
        Shape7 = new ModelRenderer(this, 0, 0);
        Shape7.addBox(0F, 0F, 0F, 1, 10, 1);
        Shape7.setRotationPoint(5F, 11F, 5F);
        Shape7.setTextureSize(64, 64);
        Shape7.mirror = true;
        setRotation(Shape7, 0F, 0F, 0F);
        Shape8 = new ModelRenderer(this, 0, 0);
        Shape8.addBox(0F, 0F, 0F, 1, 10, 1);
        Shape8.setRotationPoint(5F, 11F, -6F);
        Shape8.setTextureSize(64, 64);
        Shape8.mirror = true;
        setRotation(Shape8, 0F, 0F, 0F);

        Skull = new ModelRenderer(this, 0, 33);
        Skull.addBox(0.0F, 0.0F, 0.0F, 8, 8, 8);
        Skull.setRotationPoint(-4.0F, 13.0F, -4.0F);
        Skull.setTextureSize(64, 64);
        Skull.mirror = true;
        setRotation(Skull, 0F, 0F, 0F);

        Shape10 = new ModelRenderer(this, 46, 48);
        Shape10.addBox(0F, 0F, 0F, 1, 8, 8);
        Shape10.setRotationPoint(-8F, 12F, -4F);
        Shape10.setTextureSize(64, 32);
        Shape10.mirror = true;
        setRotation(Shape10, 0F, 0F, 0F);
        Shape11 = new ModelRenderer(this, 10, 0);
        Shape11.addBox(0F, 0F, 0F, 1, 10, 2);
        Shape11.setRotationPoint(-7F, 11F, -1F);
        Shape11.setTextureSize(64, 32);
        Shape11.mirror = true;
        setRotation(Shape11, 0F, 0F, 0F);
        Shape12 = new ModelRenderer(this, 0, 52);
        Shape12.addBox(0F, 0F, 0F, 1, 2, 10);
        Shape12.setRotationPoint(-6F, 15F, -5F);
        Shape12.setTextureSize(64, 32);
        Shape12.mirror = true;
        setRotation(Shape12, 0F, 0F, 0F);

        Shape13 = new ModelRenderer(this, 28, 55);
        Shape13.addBox(0F, 0F, 0F, 8, 8, 1);
        Shape13.setRotationPoint(-4F, 12F, -8F);
        Shape13.setTextureSize(64, 32);
        Shape13.mirror = true;
        setRotation(Shape13, 0F, 0F, 0F);
        Shape14 = new ModelRenderer(this, 4, 0);
        Shape14.addBox(0F, 0F, 0F, 2, 10, 1);
        Shape14.setRotationPoint(-1F, 11F, -7F);
        Shape14.setTextureSize(64, 32);
        Shape14.mirror = true;
        setRotation(Shape14, 0F, 0F, 0F);
        Shape15 = new ModelRenderer(this, 33, 34);
        Shape15.addBox(0F, 0F, 0F, 10, 2, 1);
        Shape15.setRotationPoint(-5F, 15F, -6F);
        Shape15.setTextureSize(64, 32);
        Shape15.mirror = true;
        setRotation(Shape15, 0F, 0F, 0F);

        Shape16 = new ModelRenderer(this, 46, 48);
        Shape16.addBox(0F, 0F, 0F, 1, 8, 8);
        Shape16.setRotationPoint(8F, 12F, 4F);
        Shape16.setTextureSize(64, 32);
        Shape16.mirror = true;
        setRotation(Shape16, 0F, 3.141593F, 0F);
        Shape17 = new ModelRenderer(this, 10, 0);
        Shape17.addBox(0F, 0F, 0F, 1, 10, 2);
        Shape17.setRotationPoint(6F, 11F, -1F);
        Shape17.setTextureSize(64, 32);
        Shape17.mirror = true;
        setRotation(Shape17, 0F, 0F, 0F);
        Shape18 = new ModelRenderer(this, 0, 52);
        Shape18.addBox(0F, 0F, 0F, 1, 2, 10);
        Shape18.setRotationPoint(5F, 15F, -5F);
        Shape18.setTextureSize(64, 32);
        Shape18.mirror = true;
        setRotation(Shape18, 0F, 0F, 0F);

        Shape19 = new ModelRenderer(this, 28, 55);
        Shape19.addBox(0F, 0F, 0F, 8, 8, 1);
        Shape19.setRotationPoint(4F, 12F, 8F);
        Shape19.setTextureSize(64, 32);
        Shape19.mirror = true;
        setRotation(Shape19, 0F, 3.141593F, 0F);
        Shape20 = new ModelRenderer(this, 4, 0);
        Shape20.addBox(0F, 0F, 0F, 2, 10, 1);
        Shape20.setRotationPoint(-1F, 11F, 6F);
        Shape20.setTextureSize(64, 32);
        Shape20.mirror = true;
        setRotation(Shape20, 0F, 0F, 0F);
        Shape21 = new ModelRenderer(this, 33, 34);
        Shape21.addBox(0F, 0F, 0F, 10, 2, 1);
        Shape21.setRotationPoint(-5F, 15F, 5F);
        Shape21.setTextureSize(64, 32);
        Shape21.mirror = true;
        setRotation(Shape21, 0F, 0F, 0F);
    }

    public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5, entity);
        renderModel(f5);
        renderSkull(f5);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z) {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity) {
        super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    }

    public void renderModel(float f) {
        Shape1.render(f);
        Shape2.render(f);
        Shape3.render(f);
        Shape4.render(f);
        Shape5.render(f);
        Shape6.render(f);
        Shape7.render(f);
        Shape8.render(f);

        if (rightConnected) {
            Shape10.render(f);
            Shape11.render(f);
            Shape12.render(f);
        }

        if (frontConnected) {
            Shape13.render(f);
            Shape14.render(f);
            Shape15.render(f);
        }

        if (leftConnected) {
            Shape16.render(f);
            Shape17.render(f);
            Shape18.render(f);
        }

        if (backConnected) {
            Shape19.render(f);
            Shape20.render(f);
            Shape21.render(f);
        }
    }

    public void renderSkull(float f) {
        Skull.render(f);
    }

}
